#!/usr/bin/env sh

# This script is intended to be used on a Debian or Debian-based distribution
# and installs few useful Vim plugins for a better coding experience.




### Functions
#############

sudo_privileges () {
    id -Gn 2>/dev/null | grep -qw "sudo"
}
# ---
ask_user () {
    printf "%s\n" "$1"
    read -r -p "wish to proceed anyway? [y/N] " ANS
    case "$ANS" in
        y | Y | yes | YES) printf "\n%s\n" "setup resumed" ;;
        *) printf "\n%s\n" "setup interrupted"; exit 1 ;;
    esac
}




### Checks
##########

if [ "$(id -u)" -eq 0 ]; then
    printf "\n%s"   "This script MUST NOT be run as root user since it makes changes"
    printf "\n%s"   "to the \$HOME directory of the \$USER executing this script."
    printf "\n%s"   "The \$HOME directory of the root user is, of course, '/root'."
    printf "\n%s"   "We don't want to mess around in there. So run this script as a"
    printf "\n%s\n" "normal user. You will be asked for a sudo password when necessary."
    exit 1
fi
# ---
if ! command -v vim >/dev/null 2>&1 || ! \vim --version 2>/dev/null | head -n1 | grep -q 'Vi IMproved 9'; then
    printf "\n%s"   "═══════ WARNING: Vim9 not found ══════"
    printf "\n%s\n" "install Vim9 and run this script again"
    exit 1
fi




### Podeen-Plug
###############

cat << EOF
.   .   ___         _                ___ _
|\\_/|  | _ \\___  __| |___ ___ _ _   | _ \\ |_  _ __ _
(O.o)  |  _/ _ \\/ _\` / -_) -_) ' \\  |  _/ | || / _\` |
(> <)  |_| \\___/\\__,_\\___\\___|_||_| |_| |_|\\_,_\\__, |
                                               |___/

EOF




### Packages & Sudo
###################

PACKAGES="git vim-gtk3 python3-full python3-pip black fonts-cascadia-code"
for PKG in $PACKAGES; do
    if ! apt-get -s install "$PKG" >/dev/null 2>&1; then
        PROBLEMS="${PROBLEMS:-} $PKG"
    fi
done
# ---
if [ -n "$PROBLEMS" ]; then
    ask_proceed "these packages might cause issues:'$PROBLEMS'"
fi
# ---
if ! sudo_privileges; then
    ask_proceed "'$USER' does not have sudo privileges"
fi




### Path & Dependencies
#######################

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )" || exit 1
sudo sh -c '
    apt-get update &&
    apt-get upgrade -qq -y --allow-downgrades &&
    apt-get purge -qq -y vim-tiny vim || true &&
    apt-get install -qq -y '"$PACKAGES"' || true &&
    apt-get -qq -y autoremove --purge &&
    apt-get -qq -y autoclean
' || {
    printf "\n%s\n" "packages installation failed"
    exit 1
}




### Start
#########

set -- \
    "https://github.com/ctrlpvim/ctrlp.vim.git" \
    "https://github.com/machakann/vim-sandwich.git" \
    "https://github.com/tpope/vim-commentary.git" \
    "https://github.com/cohama/lexima.vim.git" \
    "https://github.com/wellle/context.vim.git"
# ---
VIM=$HOME/.vim
START="$VIM/pack/plug/start"
mkdir -p "$START" >/dev/null 2>&1 || {
    printf "\n%s\n" "makedir '$START' failed"
    exit 1
}
# ---
for DIR in "$START"/*; do
    [ -e "$DIR" ] && [ -d "$DIR/.git" ] || continue
    ORIGIN=$(\git -C "$DIR" config --get remote.origin.url 2>/dev/null)
    printf "\n%s\n" "UPDATING $(basename "$DIR")"
    \git -C "$DIR" pull --ff-only
    for URL in "$@"; do
        if [ "$ORIGIN" = "$URL" ]; then
            case " ${FOUND-} " in
                *" $URL "*) : ;;
                *) FOUND="${FOUND:+$FOUND }$URL" ;;
            esac
        fi
    done
done
# ---
for URL in "$@"; do
    case " ${FOUND-} " in
        *" $URL "*)
            { :; }
            ;;
        *)
            printf "\n%s\n" "CLONING $URL"
            \git -C "$START" clone "$URL"
            ;;
    esac
done
# ---
if [ ! -d "$VIM/plugin" ] && [ -d "$SCRIPTPATH/plug" ]; then
    cp -R "$SCRIPTPATH/plug" "$VIM/plugin"
fi




### Finish
##########

printf "\n%s\n" "setup complete"
