#!/usr/bin/env sh

# This script is intended to be used on a Debian or Debian-based distribution
# and installs a minimal VSCode work environment with some useful extensions.




### Functions
#############

sudo_privileges () {
    id -Gn 2>/dev/null | grep -qw "sudo"
}
# ---
ask_user () {
    printf "%s\n" "$1"
    read -r -p "wish to proceed anyway? [y/N] " ANS
    case "$ANS" in
        y | Y | yes | YES) printf "\n%s\n" "setup resumed" ;;
        *) printf "\n%s\n" "setup interrupted"; exit 1 ;;
    esac
}
# ---
try_run () {
    if "$@" >/dev/null 2>&1; then
        printf "\n"
    else
        printf ": %s\n" "command failed"
    fi
}




### Checks
##########

if [ "$(id -u)" -eq 0 ]; then
    printf "\n%s"   "This script MUST NOT be run as root user since it makes changes"
    printf "\n%s"   "to the \$HOME directory of the \$USER executing this script."
    printf "\n%s"   "The \$HOME directory of the root user is, of course, '/root'."
    printf "\n%s"   "We don't want to mess around in there. So run this script as a"
    printf "\n%s\n" "normal user. You will be asked for a sudo password when necessary."
    exit 1
fi
# ---
if ! command -v code >/dev/null 2>&1; then
    printf "\n%s"   "═══════ WARNING: VSCode not found ══════"
    printf "\n%s\n" "install VSCode and run this script again"
    exit 1
fi




### Podeen-Code
###############

cat << EOF
.   .   ___         _                 ___         _
|\\_/|  | _ \\___  __| |___ ___ _ _    / __|___  __| |___
(O.o)  |  _/ _ \\/ _\` / -_) -_) ' \\  | (__/ _ \\/ _\` / -_)
(> <)  |_| \\___/\\__,_\\___\\___|_||_|  \\___\\___/\\__,_\\___|

EOF




### Packages & Sudo
###################

PACKAGES="git dash bash gnome-keyring pandoc texlive-full \
python3-full python3-pip black fonts-cascadia-code"
for PKG in $PACKAGES; do
    if ! apt-get -s install "$PKG" >/dev/null 2>&1; then
        PROBLEMS="${PROBLEMS:+$PROBLEMS }$PKG"
    fi
done
# ---
if [ -n "${PROBLEMS-}" ]; then
    ask_user "these packages might cause issues: '$PROBLEMS'"
fi
# ---
if ! sudo_privileges; then
    ask_user "'$USER' does not have sudo privileges"
fi




### Path & Dependencies
#######################

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )" || exit 1
sudo sh -c '
    apt-get update &&
    apt-get upgrade -qq -y --allow-downgrades &&
    apt-get install -qq -y '"$PACKAGES"' || true &&
    apt-get -qq -y autoremove --purge &&
    apt-get -qq -y autoclean
' || {
    printf "\n%s\n" "packages installation failed"
    exit 1
}




### Start
#########

printf "\n%s\n" "UNINSTALLING ALL EXTENSIONS"
for EXTENSION in $(\code --list-extensions); do
    printf "%s" "uninstalling '$EXTENSION'"
    try_run \code --uninstall-extension "$EXTENSION"
done
rm -rf "$HOME/.config/Code/CachedExtensionVSIXs" \
      "$HOME/.vscode/extensions" 2>/dev/null || true
# ---
printf "\n%s\n" "INSTALLING CODE EXTENSIONS"
for EXTENSION in \
    github.copilot \
    james-yu.latex-workshop \
    ms-python.python \
    ms-python.black-formatter \
    ms-toolsai.jupyter
do
    printf "%s" "installing '$EXTENSION'"
    try_run \code --install-extension "$EXTENSION"
done
# ---
BASE="$HOME/.config/Code/User"
if mkdir -p "$BASE"; then
    cat "$SCRIPTPATH/code/settings.json" > "$BASE/settings.json"
    cat "$SCRIPTPATH/code/keybindings.json" > "$BASE/keybindings.json"
fi




### Finish
##########

printf "\n%s\n" "setup complete"
